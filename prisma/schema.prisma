generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id              Int        @id @default(autoincrement())
  name            String     @unique
  description     String?
  parent_id       Int?
  parent_category Category?  @relation("category_parent", fields: [parent_id], references: [id])
  children        Category[] @relation("category_parent")
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  brands           Category_brand[]
  attribute_groups Attribute_Group[]
  products         Product[]
  product_models   Product_model[]

  AttributeGroup_Category AttributeGroup_Category[]
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  logo_url    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  categories    Category_brand[]
  products      Product[]
  product_model Product_model[]
}

model Product_model {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  category_brand_id Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  category_brand   Category_brand?              @relation(fields: [category_brand_id], references: [id])
  attribute_groups AttribueGroup_ProductModel[]
  products         Product[]
  Category         Category?                    @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  Brand            Brand?                       @relation(fields: [brandId], references: [id])
  brandId          Int?
}

model AttributeGroup_Category {
  id                 Int @id @default(autoincrement())
  attribute_group_id Int
  category_id        Int

  attribute Attribute_Group @relation(fields: [attribute_group_id], references: [id])
  category  Category        @relation(fields: [category_id], references: [id])
}

model Category_brand {
  id          Int      @id @default(autoincrement())
  category_id Int?
  brand_id    Int?
  created_at  DateTime @default(now())

  brand    Brand?    @relation(fields: [brand_id], references: [id])
  category Category? @relation(fields: [category_id], references: [id])

  sale_models Sale_model[]
  products    Product[]

  Product_model Product_model[]
}

model Attribute_Group {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  categories     AttributeGroup_Category[]
  product_models AttribueGroup_ProductModel[]

  attributes Attribute[]
  Category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model AttribueGroup_ProductModel {
  id                 Int @id @default(autoincrement())
  attribute_group_id Int
  product_model_id   Int

  attribute_group Attribute_Group @relation(fields: [attribute_group_id], references: [id])
  product_model   Product_model   @relation(fields: [product_model_id], references: [id])
}

model Attribute {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  position           Int?     @default(1)
  attribute_group_id Int
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  attribute_group Attribute_Group? @relation(fields: [attribute_group_id], references: [id])
  product_info    Product_Info[]
}

model Product_Info {
  id           Int     @id @default(autoincrement())
  product_id   Int
  attribute_id Int
  value        String
  show_in_main Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  product   Product?   @relation(fields: [product_id], references: [id])
  attribute Attribute? @relation(fields: [attribute_id], references: [id])
}

model Views {
  id         Int      @id @default(autoincrement())
  user_id    String
  product_id Int
  liked      Boolean  @default(false)
  view_date  DateTime @default(now())

  product Product? @relation(fields: [product_id], references: [id])
}

model Payment {
  id             Int      @id @default(autoincrement())
  user_id        Int
  order_id       Int
  payment_date   String
  total_amount   Int
  payment_method String
  payment_status String

  order User_Orders? @relation(fields: [order_id], references: [id])
  user  User?        @relation(fields: [user_id], references: [id])
}

model Comment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int
  comment    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User?    @relation(fields: [user_id], references: [id])
  product Product? @relation(fields: [product_id], references: [id])
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String?
  last_name  String?
  phone      String
  password   String
  token      String?
  role       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_addresses User_address[]
  payments       Payment[]
  orders         User_Orders[]
  comments       Comment[]
  ratings        Rating[]
}

model User_address {
  id         Int @id @default(autoincrement())
  user_id    Int
  address_id Int

  user    User?    @relation(fields: [user_id], references: [id])
  address Address? @relation(fields: [address_id], references: [id])
}

model User_Orders {
  id           Int      @id @default(autoincrement())
  user_id      Int
  address_id   Int
  full_name    String
  phone_number String
  status       String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  user    User?    @relation(fields: [user_id], references: [id])
  address Address? @relation(fields: [address_id], references: [id])

  Order_items Order_items[]
  payment     Payment[]
}

model Order_items {
  id         Int      @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  created_at DateTime @default(now())

  order   User_Orders? @relation(fields: [order_id], references: [id])
  product Product?     @relation(fields: [product_id], references: [id])
}

model Product {
  id               Int      @id @default(autoincrement())
  category_id      Int
  brand_id         Int
  product_model_id Int
  description      String
  price            Int
  count            Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  category      Category?      @relation(fields: [category_id], references: [id])
  brand         Brand?         @relation(fields: [brand_id], references: [id])
  product_model Product_model? @relation(fields: [product_model_id], references: [id])

  product_info     Product_Info[]
  product_media    Product_media[]
  cart_items       Cart_items[]
  order_items      Order_items[]
  comments         Comment[]
  ratings          Rating[]
  views            Views[]
  Category_brand   Category_brand? @relation(fields: [category_brandId], references: [id])
  category_brandId Int?
}

model Product_media {
  id         Int    @id @default(autoincrement())
  product_id Int
  url        String
  type       String

  product Product? @relation(fields: [product_id], references: [id])
}

model Cart_items {
  id         Int      @id @default(autoincrement())
  user_id    String
  product_id Int
  quantity   Int
  subtotal   Int
  created_at DateTime @default(now())

  product Product? @relation(fields: [product_id], references: [id])
}

model Sale {
  id         Int      @id @default(autoincrement())
  start_date String
  end_date   String
  percent    Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sales Sale_model[]
}

model Sale_model {
  id       Int  @id @default(autoincrement())
  model_id Int?
  sale_id  Int?

  sale Sale? @relation(fields: [sale_id], references: [id])

  model Category_brand? @relation(fields: [model_id], references: [id])
}

model Position {
  id                          Int      @id @default(1)
  brand_positioning           Int[]
  attribute_positioning       Int[]
  category_positioning        Int[]
  attribute_group_positioning Int[]
  createdAt                   DateTime @default(now()) @map("created_at")
  updatedAt                   DateTime @updatedAt @map("updated_at")
}

// Rating

model Rating {
  id         Int @id @default(autoincrement())
  rating     Int
  user_id    Int
  product_id Int

  user    User?    @relation(fields: [user_id], references: [id])
  product Product? @relation(fields: [product_id], references: [id])
}

model Address {
  id          Int    @id @default(autoincrement())
  location    String
  street      String
  district_id Int?

  district District? @relation(fields: [district_id], references: [id])

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  order          User_Orders[]
  user_addresses User_address[]
}

model District {
  id        Int    @id @default(autoincrement())
  name      String @unique
  parent_id Int?

  addresses Address[]

  parent    District?  @relation("districts_child", fields: [parent_id], references: [id])
  districts District[] @relation("districts_child")
}

// Shu yerda sizga berilgan modellarning yarating
